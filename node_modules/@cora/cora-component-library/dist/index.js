Object.defineProperty(exports, '__esModule', { value: true });

var jsxRuntime = require('react/jsx-runtime');
var reactBootstrap = require('react-bootstrap');
var reactFontawesome = require('@fortawesome/react-fontawesome');
var freeSolidSvgIcons = require('@fortawesome/free-solid-svg-icons');
var styled = require('styled-components');
var React = require('react');
var octiconsReact = require('@primer/octicons-react');
var clsx = require('clsx');
var ej2ReactGrids = require('@syncfusion/ej2-react-grids');
var uuid = require('uuid');
var reactSortableHoc = require('react-sortable-hoc');
var Creatable = require('react-select/creatable');
var ej2ReactInputs = require('@syncfusion/ej2-react-inputs');

function _interopDefaultLegacy (e) { return e && typeof e === 'object' && 'default' in e ? e : { 'default': e }; }

var styled__default = /*#__PURE__*/_interopDefaultLegacy(styled);
var React__default = /*#__PURE__*/_interopDefaultLegacy(React);
var clsx__default = /*#__PURE__*/_interopDefaultLegacy(clsx);
var Creatable__default = /*#__PURE__*/_interopDefaultLegacy(Creatable);

const Button = ({ children, type, onClick, disabled, }) => {
    let varient = "primary";
    let classes = [];
    switch (type) {
        case "primary":
            classes.push("btn btn-primary");
            break;
        case "secondary":
            classes.push("cora-button-secondary");
            varient = `outline-${varient}`;
            break;
    }
    return (jsxRuntime.jsx(reactBootstrap.Button, Object.assign({ variant: varient, className: `cora-button ${classes.join(" ")}`, onClick: onClick, disabled: disabled }, { children: jsxRuntime.jsx("span", { children: children }, void 0) }), void 0));
};

const ButtonMultiline = ({ children, type, align, subText, onClick, disabled, }) => {
    let varient = "primary";
    let classes = [];
    switch (type) {
        case "primary":
            classes.push("btn btn-primary");
            break;
        case "secondary":
            classes.push("cora-button-secondary");
            varient = `outline-${varient}`;
            break;
    }
    if (align === "end") {
        classes.push("align-items-end");
    }
    return (jsxRuntime.jsxs(reactBootstrap.Button, Object.assign({ variant: varient, className: `cora-button-multiline ${classes.join(" ")}`, onClick: onClick, disabled: disabled }, { children: [jsxRuntime.jsx("span", { children: children }, void 0), jsxRuntime.jsx("span", Object.assign({ className: "subText" }, { children: subText }), void 0)] }), void 0));
};

const ButtonLink = ({ children, onClick, disabled, }) => {
    return (jsxRuntime.jsx(reactBootstrap.Button, Object.assign({ variant: "primary", className: "cora-button-link", onClick: onClick, disabled: disabled }, { children: jsxRuntime.jsx("span", { children: children }, void 0) }), void 0));
};

const ButtonIcon = ({ children, count, onClick, disabled, }) => {
    let classes = [];
    if (count && count > 0)
        classes.push("display-count");
    return (jsxRuntime.jsx(reactBootstrap.Button, Object.assign({ variant: "primary", "data-count": count, className: `cora-button-icon ${classes.join(" ")}`, onClick: onClick, disabled: disabled }, { children: jsxRuntime.jsx("span", { children: children }, void 0) }), void 0));
};

const Dropdown = ({ label, color, listItems, type, }) => {
    return (jsxRuntime.jsxs(reactBootstrap.Dropdown, Object.assign({ className: "cora-dropdown" }, { children: [jsxRuntime.jsx(reactBootstrap.Dropdown.Toggle, Object.assign({ id: "dropdown-basic", className: `btn btn-${color} ${type}`, variant: color }, { children: type === "ellipsis" ? jsxRuntime.jsx(reactFontawesome.FontAwesomeIcon, { icon: freeSolidSvgIcons.faEllipsisV }, void 0) : label }), void 0), jsxRuntime.jsx(reactBootstrap.Dropdown.Menu, { children: listItems.map((item, index) => {
                    return (jsxRuntime.jsx(jsxRuntime.Fragment, { children: jsxRuntime.jsx(reactBootstrap.Dropdown.Item, Object.assign({ onClick: item.onClick }, { children: item.text }), index) }, void 0));
                }) }, void 0)] }), void 0));
};

const Link = ({ children, href, isActive }) => {
    const classes = ["cora-link", "nav-link"];
    if (isActive) {
        classes.push("nav-link-active");
    }
    return (jsxRuntime.jsx("a", Object.assign({ className: classes.join(" "), href: href }, { children: children }), void 0));
};

const TextInput = ({ id, label, name, value, type, helpText, placeholder, validation, onChange, onBlur, }) => {
    return (jsxRuntime.jsxs(reactBootstrap.Form.Group, Object.assign({ id: id, className: "mb-3" }, { children: [jsxRuntime.jsx(reactBootstrap.Form.Label, { children: label }, void 0), jsxRuntime.jsx(reactBootstrap.Form.Control, { name: name, isValid: validation === null || validation === void 0 ? void 0 : validation.isValid, isInvalid: validation === null || validation === void 0 ? void 0 : validation.isInvalid, value: value, placeholder: placeholder, as: type, style: type === "textarea" ? { height: "100px" } : {}, onChange: onChange, onBlur: onBlur }, void 0), validation && (jsxRuntime.jsx(reactBootstrap.Form.Control.Feedback, Object.assign({ type: validation.isInvalid ? "invalid" : "valid" }, { children: validation.validationMessage }), void 0)), helpText && jsxRuntime.jsx(reactBootstrap.Form.Text, Object.assign({ className: "text-muted" }, { children: helpText }), void 0)] }), void 0));
};

const Switch = ({ id, label, name, checked, disabled, onChange, }) => {
    return (jsxRuntime.jsx(reactBootstrap.Form.Check, { type: "switch", id: id, label: label, name: name, checked: checked, disabled: disabled, onChange: onChange }, void 0));
};

const animateProgress = (side) => {
    return styled.keyframes `
    from {transform: rotate(0deg);}
    to {transform: rotate(${side + "Rotation"}deg);}
    `;
};
const ProgressLeft = styled__default["default"].div `
  background: var(--cora-${({ color }) => color});
  transform: rotate(${({ leftRotation }) => leftRotation}deg);
  animation: ${animateProgress("left")}
    ${({ animationSpeed, leftRotation }) => animationSpeed * leftRotation}s
    linear;
  animation-delay: ${({ animationSpeed, rightRotation }) => animationSpeed * rightRotation}s;
  animation-fill-mode: both;
`;
const ProgressRight = styled__default["default"].div `
  background: var(--cora-${({ color }) => color});
  transform: rotate(${({ rightRotation }) => rightRotation}deg);
  animation: ${animateProgress("right")}
    ${({ animationSpeed, rightRotation }) => animationSpeed * rightRotation}s
    linear;
`;
const CoraProgress = styled__default["default"].div `
  width: ${({ size }) => size}px;
  height: ${({ size }) => size}px;
  min-width: 75px;
  min-height: 75px;
  position: relative;

  .bar {
    position: absolute;
    height: 100%;
    width: 100%;
    background: transparent;
    clip-path: inset(0px 0px 0px 50%);
    z-index: 2;

    .progress {
      position: absolute;
      height: 100%;
      width: 100%;
      border-radius: 100%;
      -webkit-border-radius: 100%;
      clip-path: inset(0px 50% 0px 0px);
    }
  }

  .circle {
    .left {
      transform: rotate(180deg);
    }
  }
`;
const Inner = styled__default["default"].div `
  background: var(--cora-${({ color }) => color}-very-light);
  position: absolute;
  z-index: 6;
  top: 50%;
  left: 50%;
  height: calc(100% - 9px);
  width: calc(100% - 9px);
  transform: translate(-50%, -50%);
  border-radius: 100%;
  display: flex;
`;
const Content = styled__default["default"].div `
  position: absolute;
  top: 50%;
  left: 50%;
  transform: translate(-50%, -50%);
  z-index: 10;
  display: flex;
  flex-direction: column;
  text-align: center;
  font-weight: 500;
  color: #444444;
  line-height: 1;
`;
const Number$1 = styled__default["default"].div `
  font-size: ${({ size }) => size / 5}px;
`;
const Label = styled__default["default"].div `
  font-size: ${({ size }) => size / 8}px;
`;
const Progress = ({ label, percentage, color, size, }) => {
    const usablePercentage = percentage >= 100 ? 100 : percentage;
    const percentageInDegrees = (360 / 100) * usablePercentage;
    let leftRotation = 0;
    let rightRotation = 0;
    if (percentageInDegrees > 180) {
        rightRotation = 180;
        leftRotation = percentageInDegrees - rightRotation;
    }
    else {
        rightRotation = percentageInDegrees;
    }
    const animationSpeed = 1 / 360;
    return (jsxRuntime.jsxs(CoraProgress, Object.assign({ className: "cora-progress", size: size }, { children: [jsxRuntime.jsx(Inner, { color: color }, void 0), jsxRuntime.jsxs(Content, { children: [jsxRuntime.jsxs(Number$1, Object.assign({ size: size }, { children: [usablePercentage, "%"] }), void 0), jsxRuntime.jsx(Label, Object.assign({ size: size }, { children: label }), void 0)] }, void 0), jsxRuntime.jsxs("div", Object.assign({ className: "circle" }, { children: [jsxRuntime.jsx("div", Object.assign({ className: "bar left" }, { children: jsxRuntime.jsx(ProgressLeft, { className: "progress", color: color, leftRotation: leftRotation, animationSpeed: animationSpeed, rightRotation: rightRotation }, void 0) }), void 0), jsxRuntime.jsx("div", Object.assign({ className: "bar right" }, { children: jsxRuntime.jsx(ProgressRight, { className: "progress", color: color, rightRotation: rightRotation, animationSpeed: animationSpeed }, void 0) }), void 0)] }), void 0)] }), void 0));
};

const ProgressGroupContainer = styled__default["default"].div `
  height: auto;
  display: flex;
  justify-content: space-between;
`;
const ProgressGroupItemContanier = styled__default["default"].div `
  display: flex;
  flex-direction: column;
  flex-grow: 1;
  position: relative;
  min-width: 230px;
  border-bottom: 4px solid transparent;

  ${({ isActive }) => isActive &&
    `
      border-bottom: 4px solid var(--cora-green);
  `}

  @keyframes bounce {
    0% {
      transform: translateY(0);
      border: 2px solid var(--cora-orange);
    }
    20% {
      transform: translateY(-5px);
    }
    40% {
      transform: translateY(0);
    }
    60% {
      transform: translateY(-2px);
    }
    80% {
      transform: translateY(0);
    }
    100% {
      border: none;
    }
  }
`;
const ProgressItem = styled__default["default"].div `
  display: flex;
  justify-content: center;
  position: relative;
`;
const ProgressGroupLine = styled__default["default"].div `
  position: absolute;
  top: 50%;
  right: 50%;
  width: 100%;
  height: 4px;
  z-index: 1;
  background-color: var(--bs-gray-300);

  ${({ isComplete }) => isComplete &&
    `
    background-color: var(--cora-green);
    `}
`;
const ProgressButtons = styled__default["default"].div `
  display: flex;
  justify-content: center;
  margin: 5px 0;

  svg {
    margin: 0 10px;
    color: var(--bs-gray-500);
    animation-duration: 1.5s;
    animation-iteration-count: 1;
    transform-origin: bottom;

    &.animate-pencil {
      animation-name: bounce;
      animation-timing-function: linear;
    }

    &:hover {
      border: 2px solid var(--cora-orange);
    }
  }
`;
const ProgressLabel = styled__default["default"].div `
  text-align: center;
  color: var(--cora-green);
  margin-bottom: 10px;

  ${({ isActive }) => isActive &&
    `
    font-weight: 600;
    `}
`;
const ProgressInfo = styled__default["default"].div `
  width: 100%;
  position: absolute;
  background-color: var(--cora-green-very-light);
  top: calc(100% + 4px);
  box-sizing: border-box;
  z-index: 2;
  padding: 10px;
`;
const ProgressInfoHeader = styled__default["default"].div `
  height: 30px;
  line-height: 30px;
  font-weight: var(--cora-font-weight-bold);
  display: flex;
  justify-content: space-between;
`;
const ProgressInfoX = styled__default["default"].div `
  width: 30px;
`;
const ProgressInfoBody = styled__default["default"].div `
  height: 100px;
  overflow: hidden;
`;
const ProgressInfoFooter = styled__default["default"].div `
  display: flex;
  justify-content: flex-end;
  height: auto;
`;

const ProgressGroupItem = ({ percentage, label, isComplete = false, isActive = false, isFirst = false, info, onEdit, }) => {
    const [infoIsVisible, setinfoIsVisible] = React__default["default"].useState(false);
    return (jsxRuntime.jsxs(ProgressGroupItemContanier, Object.assign({ isActive: isActive }, { children: [jsxRuntime.jsxs(ProgressItem, { children: [jsxRuntime.jsx(Progress, { color: "green", size: 80, percentage: percentage }, void 0), !isFirst && jsxRuntime.jsx(ProgressGroupLine, { isComplete: isComplete }, void 0)] }, void 0), jsxRuntime.jsxs(ProgressButtons, { children: [jsxRuntime.jsx(ButtonIcon, Object.assign({ onClick: onEdit }, { children: jsxRuntime.jsx(octiconsReact.PencilIcon, { className: isActive ? "animate-pencil" : "", size: 28 }, void 0) }), void 0), jsxRuntime.jsx(ButtonIcon, Object.assign({ onClick: () => {
                            setinfoIsVisible(!infoIsVisible);
                        } }, { children: jsxRuntime.jsx(octiconsReact.InfoIcon, { size: 28 }, void 0) }), void 0)] }, void 0), jsxRuntime.jsx(ProgressLabel, Object.assign({ isActive: isActive }, { children: label.toUpperCase() }), void 0), infoIsVisible && (jsxRuntime.jsxs(ProgressInfo, { children: [jsxRuntime.jsxs(ProgressInfoHeader, { children: [info.title, jsxRuntime.jsx(ProgressInfoX, { children: jsxRuntime.jsx(ButtonIcon, Object.assign({ onClick: () => {
                                        setinfoIsVisible(false);
                                    } }, { children: jsxRuntime.jsx(octiconsReact.XIcon, { size: 28 }, void 0) }), void 0) }, void 0)] }, void 0), jsxRuntime.jsx(ProgressInfoBody, { children: info.description }, void 0), info.actionText !== undefined && (jsxRuntime.jsx(ProgressInfoFooter, { children: jsxRuntime.jsx(ButtonLink, Object.assign({ onClick: info.onAction }, { children: info.actionText }), void 0) }, void 0))] }, void 0))] }), void 0));
};

const ProgressGroup = ({ children, }) => {
    return jsxRuntime.jsx(ProgressGroupContainer, { children: children }, void 0);
};

const CoraCard = styled__default["default"].div `
  box-shadow: var(--cora-box-shadow);

  .card-body {
    padding-top: 60px;

    .card-text {
      color: #767676;
    }
  }
`;
const CardHeader = styled__default["default"].div `
  background-color: var(--cora-${({ color }) => color}-very-light);
  background-image: url("${({ url }) => url}");
  height: 125px;
  position: relative;
  background-repeat: no-repeat;
  background-position: center;

  .cora-dropdown {
    display: flex;
    justify-content: flex-end;
  }

  .cora-progress {
    position: absolute;
    bottom: -50px;
  }
`;
const ButtonContainer = styled__default["default"].div `
  display: flex;
  justify-content: flex-end;
`;
const Card = ({ title, description, background, percentage, onEdit, listItems, }) => {
    return (jsxRuntime.jsx(CoraCard, { children: jsxRuntime.jsxs(reactBootstrap.Card, { children: [jsxRuntime.jsxs(CardHeader, Object.assign({ color: background.color, url: background.imageURL, className: "card-header" }, { children: [jsxRuntime.jsx(Dropdown, { label: `${title} menu`, type: "ellipsis", color: "transparent", listItems: listItems }, void 0), jsxRuntime.jsx(Progress, { color: "green", percentage: percentage, label: "Complete", size: 90 }, void 0)] }), void 0), jsxRuntime.jsxs(reactBootstrap.Card.Body, { children: [jsxRuntime.jsx(reactBootstrap.Card.Title, { children: title }, void 0), jsxRuntime.jsx(reactBootstrap.Card.Text, { children: description }, void 0), jsxRuntime.jsx(ButtonContainer, { children: jsxRuntime.jsx(ButtonLink, Object.assign({ onClick: onEdit }, { children: "EDIT" }), void 0) }, void 0)] }, void 0)] }, void 0) }, void 0));
};

const CustomMenu = React__default["default"].forwardRef(({ children, style, className, labeledBy }, ref) => {
    return (jsxRuntime.jsx("div", Object.assign({ ref: ref, style: style, className: className, "aria-labelledby": labeledBy }, { children: jsxRuntime.jsx("ul", Object.assign({ className: "list-unstyled mb-0" }, { children: React__default["default"].Children.toArray(children) }), void 0) }), void 0));
});
const CustomToggle = React__default["default"].forwardRef(({ children, onClick }, ref) => (jsxRuntime.jsx("button", Object.assign({ ref: ref, type: "button", className: "dropdown-button", onClick: (e) => {
        e.preventDefault();
        onClick(e);
    } }, { children: children }), void 0)));
const NavBarOverflowMenu = ({ visibilityMap, children, component: Component, aditionalComponentProps }) => {
    const shouldShowMenu = React__default["default"].useMemo(() => Object.values(visibilityMap).some((v) => v === false), [visibilityMap]);
    if (!shouldShowMenu) {
        return null;
    }
    return (jsxRuntime.jsxs(reactBootstrap.Dropdown, Object.assign({ role: "navigation", "aria-label": "sub_navigation" }, { children: [jsxRuntime.jsx(reactBootstrap.Dropdown.Toggle, Object.assign({ as: CustomToggle, id: "dropdown-custom-components" }, { children: jsxRuntime.jsx(reactFontawesome.FontAwesomeIcon, { icon: freeSolidSvgIcons.faEllipsisV }, void 0) }), void 0), jsxRuntime.jsx(reactBootstrap.Dropdown.Menu, Object.assign({ as: CustomMenu, labeledBy: "" }, { children: React__default["default"].Children.map(children, (child) => {
                    if (Component) {
                        if (React__default["default"].isValidElement(child) && !visibilityMap[child.props.children.props['data-targetid']]) {
                            return (jsxRuntime.jsx(Component, Object.assign({ href: child.props.href }, aditionalComponentProps, { children: jsxRuntime.jsx(reactBootstrap.Dropdown.Item, { children: child.props.children.props.children }, void 0) }), void 0));
                        }
                    }
                    else if (React__default["default"].isValidElement(child) && !visibilityMap[child.props['data-targetid']]) {
                        return jsxRuntime.jsx(reactBootstrap.Dropdown.Item, Object.assign({ href: child.props.href }, { children: child.props.children }), void 0);
                    }
                    return null;
                }) }), void 0)] }), void 0));
};

const NavBarOverflowWrapper = ({ children, component, aditionalComponentProps }) => {
    const navRef = React__default["default"].useRef(null);
    const [visibilityMap, setVisibilityMap] = React__default["default"].useState({});
    const handleIntersection = (entries) => {
        const updatedEntries = {};
        entries.forEach((entry) => {
            var _a;
            const target = entry.target;
            const targetid = (_a = target.dataset) === null || _a === void 0 ? void 0 : _a.targetid;
            if (targetid) {
                if (entry.isIntersecting) {
                    updatedEntries[targetid] = true;
                }
                else {
                    updatedEntries[targetid] = false;
                }
            }
        });
        setVisibilityMap((prev) => {
            return Object.assign(Object.assign({}, prev), updatedEntries);
        });
    };
    React__default["default"].useEffect(() => {
        const observer = new IntersectionObserver(handleIntersection, {
            root: navRef.current,
            threshold: 1,
        });
        if (navRef.current) {
            Array.from(navRef.current.children).forEach((item) => {
                const navRefChildItem = item;
                if (navRefChildItem.dataset.targetid) {
                    observer.observe(navRefChildItem);
                }
            });
        }
        return () => observer.disconnect();
    }, []);
    return (jsxRuntime.jsxs(reactBootstrap.Nav, Object.assign({ role: "navigation", "aria-label": "main_navigation", className: "flex-nowrap text-nowrap nav-bar", ref: navRef }, { children: [React__default["default"].Children.map(children, (child) => {
                if (React__default["default"].isValidElement(child)) {
                    if (component) {
                        const element = React__default["default"].cloneElement(child, Object.assign(Object.assign({}, child.props), { children: Object.assign(Object.assign({}, child.props.children), { props: Object.assign(Object.assign({}, child.props.children.props), { className: clsx__default["default"](child.props.children.props.className, {
                                        visible: visibilityMap[child.props.children.props['data-targetid']],
                                        inVisible: !visibilityMap[child.props.children.props['data-targetid']],
                                    }) }) }) }));
                        return element;
                    }
                    const element = React__default["default"].cloneElement(child, {
                        className: clsx__default["default"](child.props.className, {
                            visible: visibilityMap[child.props['data-targetid']],
                            inVisible: !visibilityMap[child.props['data-targetid']],
                        }),
                    });
                    return element;
                }
                return null;
            }), jsxRuntime.jsx(NavBarOverflowMenu, Object.assign({ visibilityMap: visibilityMap, component: component, aditionalComponentProps: aditionalComponentProps }, { children: children }), void 0)] }), void 0));
};

const formatToCamelCase = (input) => input.toLowerCase().replace(/\s+(\w)?/gi, (match, letter) => {
    return letter.toUpperCase();
});
const NavBar = ({ navItems, component: Component, activeRoute, aditionalComponentProps }) => {
    return (jsxRuntime.jsx(NavBarOverflowWrapper, Object.assign({ component: Component, aditionalComponentProps: aditionalComponentProps }, { children: navItems.map(({ title, href }) => {
            const formattedTitle = formatToCamelCase(title);
            const active = activeRoute === href;
            return Component ? (jsxRuntime.jsx(Component, Object.assign({ href: href }, aditionalComponentProps, { children: jsxRuntime.jsx(reactBootstrap.Nav.Link, Object.assign({ "data-targetid": formattedTitle, className: clsx__default["default"]('nav-item me-3', active && 'active') }, { children: title }), void 0) }), formattedTitle)) : (jsxRuntime.jsx(reactBootstrap.Nav.Link, Object.assign({ "data-targetid": formattedTitle, className: clsx__default["default"]('nav-item me-3', active && 'active'), href: href }, { children: title }), formattedTitle));
        }) }), void 0));
};

const StepsWrapper = styled__default["default"].div `
  display: flex;
`;
const Step = styled__default["default"].div `
  display: flex;
  flex-direction: column;
  flex-grow: 1;
  align-items: center;
  width: 180px;
  position: relative;
  padding: 0 20px;
`;
const StepIcon = styled__default["default"].div `
  width: 30px;
  height: 30px;
  background: var(--cora-orange);
  font-weight: 600;
  border-radius: 50%;
  z-index: 1;
  display: flex;
  align-items: center;
  justify-content: center;
  ${(props) => props.selected && { border: "2px solid var(--cora-green)" }};
  cursor: pointer;
`;
const StepLabel = styled__default["default"].div `
  text-align: center;
  color: var(--cora-green);
  ${(props) => props.selected && { textDecoration: "underline" }};
  cursor: pointer;
`;
const StepLine = styled__default["default"].div `
  position: absolute;
  top: 13px;
  right: 50%;
  height: 1px;
  width: 100%;
  background-color: var(--cora-orange);
`;
const ProgressSteps = ({ steps, selectedIndex, }) => {
    return (jsxRuntime.jsx(StepsWrapper, { children: steps.map((step, index) => {
            return (jsxRuntime.jsxs(Step, Object.assign({ onClick: () => step.onClick(index) }, { children: [jsxRuntime.jsx(StepIcon, Object.assign({ selected: selectedIndex === index }, { children: step.isComplete && jsxRuntime.jsx(octiconsReact.CheckIcon, { size: 26 }, void 0) }), void 0), index > 0 && jsxRuntime.jsx(StepLine, {}, void 0), jsxRuntime.jsx(StepLabel, Object.assign({ selected: selectedIndex === index }, { children: step.label }), void 0)] }), index));
        }) }, void 0));
};

const Modal = ({ children, title, centered, buttonText, primaryText, secondaryText, primaryOnClick, secondaryOnClick, }) => {
    const [show, setShow] = React.useState(false);
    const handleClose = () => setShow(false);
    const handleShow = () => setShow(true);
    return (jsxRuntime.jsxs("div", Object.assign({ className: "cora-modal" }, { children: [jsxRuntime.jsx(Button, Object.assign({ type: "primary", onClick: handleShow }, { children: buttonText }), void 0), jsxRuntime.jsxs(reactBootstrap.Modal, Object.assign({ show: show, onHide: handleClose, "aria-labelledby": title, centered: centered }, { children: [jsxRuntime.jsx(reactBootstrap.Modal.Header, Object.assign({ closeButton: true, className: "header" }, { children: jsxRuntime.jsx(reactBootstrap.Modal.Title, Object.assign({ className: "title" }, { children: title }), void 0) }), void 0), jsxRuntime.jsx(reactBootstrap.Modal.Body, { children: children }, void 0), jsxRuntime.jsxs(reactBootstrap.Modal.Footer, Object.assign({ className: "footer gap-2 d-md-flex justify-content-md-end" }, { children: [jsxRuntime.jsx(Button, Object.assign({ type: "secondary", onClick: () => {
                                    secondaryOnClick && secondaryOnClick();
                                    handleClose();
                                } }, { children: secondaryText || "Close" }), void 0), jsxRuntime.jsx(Button, Object.assign({ type: "primary", onClick: () => {
                                    primaryOnClick && primaryOnClick();
                                    handleClose();
                                } }, { children: primaryText || "Save" }), void 0)] }), void 0)] }), void 0)] }), void 0));
};

const pageSettings = {
    pageSize: 6,
    pageSizes: true,
};
const filterSettings = {
    type: "Menu",
};
const selectionSettings = {
    checkboxOnly: true,
    persistSelection: true,
};
const editSettings = {
    allowEditing: true,
    allowAdding: true,
    allowDeleting: true,
};
const commands = [
    {
        type: "Edit",
        buttonOption: { cssClass: "e-flat", iconCss: "e-edit e-icons" },
    },
    {
        type: "Delete",
        buttonOption: { cssClass: "e-flat", iconCss: "e-delete e-icons" },
    },
    {
        type: "Save",
        buttonOption: { cssClass: "e-flat", iconCss: "e-update e-icons" },
    },
    {
        type: "Cancel",
        buttonOption: { cssClass: "e-flat", iconCss: "e-cancel-icon e-icons" },
    },
];
const GridContainer = styled__default["default"].div `
  //Do some magic here later
  .e-grid{}
  .e-gridheader{}
  .e-gridpager{}
  .e-row{
    height: 50px;
  }
  .e-rowcell, .e-rowdragdrop, .e-rowdragdropcell{
    &.e-selectionbackground{
      background-color: var(--blue-very-light);
    }
  }
  .e-check{
    &:before{
      width: 50px;
      height: 50px;
    }}
`;
const Grid = ({ tableDefinition, data, primaryKey, allowPaging, allowFilter, allowSorting, allowCheckboxColumn, allowRowDragAndDrop, toolbarItems, onRowChecked, }) => {
    return (jsxRuntime.jsx(GridContainer, { children: jsxRuntime.jsxs(ej2ReactGrids.GridComponent, Object.assign({ dataSource: data, pageSettings: pageSettings, filterSettings: filterSettings, selectionSettings: selectionSettings, editSettings: editSettings, toolbar: toolbarItems, allowSorting: allowSorting, allowPaging: allowPaging, allowFiltering: allowFilter, allowResizing: true, allowPdfExport: true, allowExcelExport: true, allowRowDragAndDrop: allowRowDragAndDrop, rowSelected: onRowChecked }, { children: [jsxRuntime.jsxs(ej2ReactGrids.ColumnsDirective, { children: [allowCheckboxColumn && (jsxRuntime.jsx(ej2ReactGrids.ColumnDirective, { type: "checkbox", allowSorting: false, allowFiltering: false, width: "60" }, void 0)), tableDefinition.map((column) => {
                            return (jsxRuntime.jsx(ej2ReactGrids.ColumnDirective, { isPrimaryKey: column.name === primaryKey, field: column.name, headerText: column.header, type: column.type, format: column.format, visible: column.visible, allowEditing: column.allowEditing }, column.name));
                        }), jsxRuntime.jsx(ej2ReactGrids.ColumnDirective, { headerText: "Manage Records", width: "160", commands: commands }, void 0)] }, void 0), jsxRuntime.jsx(ej2ReactGrids.Inject, { services: [
                        ej2ReactGrids.Page,
                        ej2ReactGrids.Toolbar,
                        ej2ReactGrids.Sort,
                        ej2ReactGrids.Resize,
                        ej2ReactGrids.Filter,
                        ej2ReactGrids.PdfExport,
                        ej2ReactGrids.ExcelExport,
                        ej2ReactGrids.RowDD,
                        ej2ReactGrids.Edit,
                        ej2ReactGrids.CommandColumn,
                    ] }, void 0)] }), void 0) }, void 0));
};

//Copied from the arraymove npm package due to exporting error.
function arrayMoveMutable(array, fromIndex, toIndex) {
    const startIndex = fromIndex < 0 ? array.length + fromIndex : fromIndex;
    if (startIndex >= 0 && startIndex < array.length) {
        const endIndex = toIndex < 0 ? array.length + toIndex : toIndex;
        const [item] = array.splice(fromIndex, 1);
        array.splice(endIndex, 0, item);
    }
}
function arrayMoveImmutable(array, fromIndex, toIndex) {
    array = [...array];
    arrayMoveMutable(array, fromIndex, toIndex);
    return array;
}

const RepeaterContainer = styled__default["default"].div `
  width: 100%;
  height: auto;
  border-width: 1px 2px;
  border-style: solid;
  border-color: var(--cora-gray-light);

  ul {
    list-style-type: none;
    padding: 0;
    margin: 0;
  }
`;
const EmptyRepeater = styled__default["default"].div `
  width: 100%;
  height: 100px;
  display: flex;
  justify-content: center;
  align-items: center;
`;
const RepeaterRow = styled__default["default"].div `
  display: flex;
  justify-content: space-between;
  background-color: white;
  border-width: 1px 0 1px 0;
  border-color: var(--cora-gray-light);
  border-style: solid;
  list-style: none;
  height: auto;
  line-height: 40px;
  padding: 5px 0;
  box-sizing: border-box;
  white-space: nowrap;

  &.checked {
    background-color: var(--cora-blue-very-light);
  }

  &.header {
    background-color: var(--cora-gray-light);
    font-weight: bold;
  }
`;
const RepeaterCustomContainer = styled__default["default"].div `
  width: 100%;
  display: flex;
  //justify-content: space-around;
`;
const RepeaterCell = styled__default["default"].div `
  width: ${({ width }) => width}%;
  margin: 0 15px;
  text-overflow: ellipsis;
  white-space: nowrap;
`;
const RepeaterTextCell = styled__default["default"](RepeaterCell) `
  text-align: left;
  max-width: 200px;
  overflow: hidden;
`;
const RepeaterNumericCell = styled__default["default"](RepeaterCell) `
  text-align: right;
  max-width: 300px;
  overflow: hidden;
`;
const RepeaterSelectCell = styled__default["default"](RepeaterCell) `
  overflow: visible;
  line-height: 1;
`;
const RepeaterCheck = styled__default["default"].div `
  width: 40px;

  input {
    cursor: pointer;
    width: 20px;
    height: 20px;
    position: relative;
    top: 5px;
    left: 10px;

    &:checked {
      background-color: var(--cora-blue);
      border-color: var(--cora-blue);
    }

    &:focus {
      border-color: var(--cora-blue);
      box-shadow: 0 0 0 0.25rem var(--cora-blue-very-light);
    }
  }
`;
const RepeaterPosition = styled__default["default"].div `
  width: 80px;
`;
const RepeaterHeaderIcon = styled__default["default"].div `
  width: 40px;
  cursor: pointer;
`;
const RepeaterGrabber = styled__default["default"].div `
  cursor: grab;
  width: 40px;
`;

const RepeaterHeader = ({ columnTemplate, handleCheckAll, showCheckbox, showPosition, showExpand, showAdd, columnWidth, expandOnClick, addRow, }) => {
    return (jsxRuntime.jsxs(RepeaterRow, Object.assign({ className: "header" }, { children: [showCheckbox && (jsxRuntime.jsx(RepeaterCheck, { children: jsxRuntime.jsx(reactBootstrap.FormCheck, { onChange: (event) => handleCheckAll(event.target.checked) }, void 0) }, void 0)), jsxRuntime.jsx(RepeaterCustomContainer, { children: columnTemplate.map((column) => {
                    switch (column.type) {
                        case "Numeric":
                            return (jsxRuntime.jsx(RepeaterNumericCell, Object.assign({ width: columnWidth }, { children: column.title }), uuid.v4()));
                        default:
                            return (jsxRuntime.jsx(RepeaterTextCell, Object.assign({ width: columnWidth }, { children: column.title }), uuid.v4()));
                    }
                }) }, void 0), showPosition && jsxRuntime.jsx(RepeaterPosition, { children: "Position" }, void 0), showAdd && (jsxRuntime.jsx(RepeaterHeaderIcon, Object.assign({ onClick: addRow }, { children: jsxRuntime.jsx(octiconsReact.PlusIcon, { size: 26 }, void 0) }), void 0)), showExpand && (jsxRuntime.jsx(RepeaterHeaderIcon, Object.assign({ onClick: () => expandOnClick }, { children: jsxRuntime.jsx(octiconsReact.ScreenFullIcon, { size: 26 }, void 0) }), void 0))] }), void 0));
};

const RepeaterSortableList = reactSortableHoc.SortableContainer(({ rows, columnTemplate, handleCheckChanged, handleInputChanged, handleSelectChanged, handleCreateOption, columnWidth, showCheckbox, showPosition, showReorder, }) => {
    return (jsxRuntime.jsx("ul", { children: rows.map((value, index) => (jsxRuntime.jsx(SortableRow, { index: index, value: value, columnTemplate: columnTemplate, handleCheckChanged: handleCheckChanged, handleInputChanged: handleInputChanged, handleSelectChanged: handleSelectChanged, handleCreateOption: handleCreateOption, rowIndex: index, columnWidth: columnWidth, showCheckbox: showCheckbox, showPosition: showPosition, showReorder: showReorder }, uuid.v4()))) }, void 0));
});
const DragHandle = reactSortableHoc.SortableHandle(() => {
    return (jsxRuntime.jsx(RepeaterGrabber, { children: jsxRuntime.jsx(octiconsReact.GrabberIcon, { size: 26 }, void 0) }, void 0));
});
const SortableRow = reactSortableHoc.SortableElement(({ value, columnTemplate, handleCheckChanged, handleInputChanged, handleSelectChanged, handleCreateOption, rowIndex, columnWidth, showCheckbox, showPosition, showReorder, }) => {
    return (jsxRuntime.jsxs(RepeaterRow, Object.assign({ className: value.checked ? "checked" : "" }, { children: [showCheckbox && (jsxRuntime.jsx(RepeaterCheck, { children: jsxRuntime.jsx(reactBootstrap.FormCheck, { onChange: () => handleCheckChanged(rowIndex), checked: value.checked }, void 0) }, void 0)), jsxRuntime.jsx(RepeaterCustomContainer, { children: columnTemplate.map((column, columnIndex) => {
                    var _a;
                    switch (column.type) {
                        case "Text":
                            return (jsxRuntime.jsx(RepeaterTextCell, Object.assign({ width: columnWidth }, { children: value.data[columnIndex] }), void 0));
                        case "Numeric":
                            return (jsxRuntime.jsx(RepeaterNumericCell, Object.assign({ width: columnWidth }, { children: value.data[columnIndex] }), void 0));
                        case "List":
                            return (jsxRuntime.jsx(RepeaterSelectCell, Object.assign({ width: columnWidth }, { children: jsxRuntime.jsx(Creatable__default["default"], { onChange: (selectedValue) => handleSelectChanged(selectedValue, columnIndex, rowIndex), onCreateOption: (e) => handleCreateOption(e, rowIndex), options: column.listItems, isMulti: false, value: (_a = column.listItems) === null || _a === void 0 ? void 0 : _a.filter((selectedValue) => value.data[columnIndex]
                                        .split(",")
                                        .includes(selectedValue.value)) }, void 0) }), void 0));
                        case "Input":
                            return (jsxRuntime.jsx(RepeaterCell, Object.assign({ width: columnWidth }, { children: jsxRuntime.jsx(reactBootstrap.FormControl, { onChange: (event) => handleInputChanged(rowIndex, columnIndex, event.target.value), value: value.data[columnIndex] }, `input_${columnIndex}`) }), void 0));
                    }
                }) }, void 0), showPosition && jsxRuntime.jsx(RepeaterPosition, { children: rowIndex + 1 }, void 0), showReorder && jsxRuntime.jsx(DragHandle, {}, void 0)] }), void 0));
});

const Repeater = ({ columnTemplate, rows, showCheckbox, showPosition, showReorder, showExpand, showAdd, expandOnClick, onCreateOption, }) => {
    const [stateRows, setStateRows] = React__default["default"].useState(rows);
    const onSortEnd = ({ oldIndex, newIndex, }) => {
        setStateRows((rows) => {
            return arrayMoveImmutable(rows, oldIndex, newIndex);
        });
    };
    const handleCheckChanged = (index) => {
        let rows = [...stateRows];
        rows[index].checked = !rows[index].checked;
        setStateRows(rows);
    };
    const handleCheckAll = (isChecked) => {
        let rows = [...stateRows];
        rows.forEach((row) => (row.checked = isChecked));
        setStateRows(rows);
    };
    const handleInputChanged = (rowIndex, columnIndex, value) => {
        let rows = [...stateRows];
        rows[rowIndex].data[columnIndex] = value;
        setStateRows(rows);
    };
    const handleSelectChanged = (selectedValue, columnIndex, rowIndex) => {
        let rows = [...stateRows];
        rows[rowIndex].data[columnIndex] = selectedValue.value;
        setStateRows(rows);
    };
    const handleAddRow = () => {
        let rows = [...stateRows];
        rows.splice(0, 0, { checked: false, data: [""] });
        setStateRows(rows);
    };
    const columnWidth = 100 / Object.keys(columnTemplate).length;
    return (jsxRuntime.jsxs(RepeaterContainer, { children: [jsxRuntime.jsx(RepeaterHeader, { columnTemplate: columnTemplate, handleCheckAll: handleCheckAll, showCheckbox: showCheckbox, showPosition: showPosition, showExpand: showExpand, columnWidth: columnWidth, expandOnClick: expandOnClick, showAdd: showAdd, addRow: handleAddRow }, void 0), stateRows.length > 0 && (jsxRuntime.jsx(RepeaterSortableList, { rows: stateRows, columnTemplate: columnTemplate, handleCheckChanged: handleCheckChanged, handleInputChanged: handleInputChanged, handleSelectChanged: handleSelectChanged, handleCreateOption: (e, i) => {
                    return onCreateOption(e, i);
                }, onSortEnd: onSortEnd, lockAxis: "y", useDragHandle: true, columnWidth: columnWidth, showCheckbox: showCheckbox, showPosition: showPosition, showReorder: showReorder }, void 0)), stateRows.length === 0 && (jsxRuntime.jsx(EmptyRepeater, { children: "No Data to Display" }, void 0))] }, void 0));
};

const ToastHeader = styled__default["default"](reactBootstrap.Toast.Header) `
  background-color: var(--cora-${({ color }) => color});
  border-bottom: none;
  border-top: 5px solid var(--cora-${({ color }) => color}-dark);
  color: var(--bs-body-color);
`;
const ToastBody = styled__default["default"](reactBootstrap.Toast.Body) `
  background-color: var(--cora-${({ color }) => color});
  padding-top: 0;
`;
const ToastFooter = styled__default["default"].div `
  background-color: var(--cora-${({ color }) => color});
`;
const ToastAction = styled__default["default"].div `
  width: 100%;
  padding: 5px;
  text-decoration: underline;
  cursor: pointer;
  text-align: right;
`;
const Toast = ({ title, message, autoHide, variant, actionText, action, }) => {
    const [show, setShow] = React__default["default"].useState(false);
    const showToast = () => setShow(true);
    const hideToast = () => setShow(false);
    React__default["default"].useEffect(() => {
        showToast();
    }, [message]);
    return (jsxRuntime.jsxs(reactBootstrap.Toast, Object.assign({ show: show, onClose: hideToast, autohide: autoHide, delay: 5000, className: variant }, { children: [jsxRuntime.jsx(ToastHeader, Object.assign({ color: variant }, { children: jsxRuntime.jsx("span", Object.assign({ className: "me-auto" }, { children: title }), void 0) }), void 0), jsxRuntime.jsx(ToastBody, Object.assign({ color: variant }, { children: message }), void 0), jsxRuntime.jsx(ToastFooter, Object.assign({ color: variant }, { children: jsxRuntime.jsx(ToastAction, Object.assign({ onClick: action }, { children: actionText }), void 0) }), void 0)] }), void 0));
};

const ToastGroup = ({ toasts, position }) => {
    return (jsxRuntime.jsx(reactBootstrap.ToastContainer, Object.assign({ className: "p-3", position: position }, { children: toasts.map((toast) => {
            return (jsxRuntime.jsx(Toast, { title: toast.title, message: toast.message, autoHide: toast.autoHide, variant: toast.variant, actionText: toast.actionText, action: toast.action }, uuid.v4()));
        }) }), void 0));
};

const Select = ({ id, label, name, disabled, options, helpText, validation, value, onChange, }) => {
    return (jsxRuntime.jsxs(reactBootstrap.Form.Group, Object.assign({ id: id, className: "mb-3" }, { children: [jsxRuntime.jsx(reactBootstrap.Form.Label, { children: label }, void 0), jsxRuntime.jsx(reactBootstrap.Form.Select, Object.assign({ name: name, disabled: disabled, isValid: validation ? validation.isValid : false, isInvalid: validation ? validation.isInvalid : false, "aria-label": label, value: value, onChange: onChange }, { children: options.map((option) => {
                    return (jsxRuntime.jsx("option", Object.assign({ value: option.value }, { children: option.text }), uuid.v4()));
                }) }), void 0), validation && (jsxRuntime.jsx(reactBootstrap.Form.Control.Feedback, Object.assign({ type: validation.isInvalid ? "invalid" : "valid" }, { children: validation.validationMessage }), void 0)), helpText && jsxRuntime.jsx(reactBootstrap.Form.Text, Object.assign({ className: "text-muted" }, { children: helpText }), void 0)] }), void 0));
};

const CheckRadio = ({ id, label, name, checked, helpText, validation, disabled, onChange, type, }) => {
    return (jsxRuntime.jsxs("div", { children: [jsxRuntime.jsxs(reactBootstrap.Form.Check, Object.assign({ className: "form-check", type: type ? type : "checkbox" }, { children: [jsxRuntime.jsx(reactBootstrap.Form.Check.Input, { type: type ? type : "checkbox", isValid: validation === null || validation === void 0 ? void 0 : validation.isValid, isInvalid: validation === null || validation === void 0 ? void 0 : validation.isInvalid, name: name, id: id, onChange: onChange, disabled: disabled, checked: checked }, void 0), jsxRuntime.jsx(reactBootstrap.Form.Check.Label, { children: label }, void 0), validation && (jsxRuntime.jsx(reactBootstrap.Form.Control.Feedback, Object.assign({ type: validation.isInvalid ? "invalid" : "valid" }, { children: validation.validationMessage }), void 0))] }), void 0), helpText && jsxRuntime.jsx(reactBootstrap.Form.Text, Object.assign({ className: "text-muted" }, { children: helpText }), void 0)] }, void 0));
};

const CheckRadioGroup = ({ checkboxGroupItems, name, type, }) => {
    return (jsxRuntime.jsx("div", Object.assign({ className: "mb-3" }, { children: checkboxGroupItems.map((checkbox) => {
            return (jsxRuntime.jsx(CheckRadio, { label: checkbox.label, helpText: checkbox.helpText, validation: checkbox.validation, checked: checkbox.checked, onChange: checkbox.onChange, id: checkbox.id, name: name, type: type }, uuid.v4()));
        }) }), void 0));
};

const SpinnerSVG = (props) => {
    return (jsxRuntime.jsxs("svg", Object.assign({ xmlns: "http://www.w3.org/2000/svg", xmlnsXlink: "http://www.w3.org/1999/xlink", version: "1.0", width: "64px", height: "64px", viewBox: "0 0 128 128", xmlSpace: "preserve" }, { children: [jsxRuntime.jsx("circle", { cx: "64.13", cy: "64.13", r: "27.63", fill: "#df0062" }, void 0), jsxRuntime.jsx("path", { d: "M64.13 18.5A45.63 45.63 0 1 1 18.5 64.13 45.63 45.63 0 0 1 64.13 18.5zm0 7.85a37.78 37.78 0 1 1-37.78 37.78 37.78 37.78 0 0 1 37.78-37.78z", "fill-rule": "evenodd", fill: "#df0062" }, void 0), jsxRuntime.jsxs("g", { children: [jsxRuntime.jsx("path", { d: "M95.25 17.4a56.26 56.26 0 0 0-76.8 13.23L12.1 26.2a64 64 0 0 1 87.6-15.17z", fill: "#df0062" }, void 0), jsxRuntime.jsx("path", { d: "M95.25 17.4a56.26 56.26 0 0 0-76.8 13.23L12.1 26.2a64 64 0 0 1 87.6-15.17z", fill: "#df0062", transform: "rotate(120 64 64)" }, void 0), jsxRuntime.jsx("path", { d: "M95.25 17.4a56.26 56.26 0 0 0-76.8 13.23L12.1 26.2a64 64 0 0 1 87.6-15.17z", fill: "#df0062", transform: "rotate(240 64 64)" }, void 0), jsxRuntime.jsx("animateTransform", { attributeName: "transform", type: "rotate", from: "0 64 64", to: "120 64 64", dur: "240ms", repeatCount: "indefinite" }, void 0)] }, void 0)] }), void 0));
};
const SpinnerSVGMemo = React__default["default"].memo(SpinnerSVG);

const PageDimmer = styled__default["default"].div `
  //width: 100vw;
  //height: 100vh;
  //background-color: rgba(0, 0, 0, 0.05);
`;
const SVGContainer = styled__default["default"].div `
  width: 300px;
  padding: 10px;
  background: var(--cora-white);
  display: flex;
  flex-direction: column;
  align-items: center;
  justify-content: center;
  position: fixed;
  top: 50%;
  left: 50%;
  transform: translate(-50%, -50%);
`;
const Spinner = ({ showSpinner, text }) => {
    return (jsxRuntime.jsx("div", { children: showSpinner && (jsxRuntime.jsx(PageDimmer, { children: jsxRuntime.jsxs(SVGContainer, { children: [jsxRuntime.jsx(SpinnerSVGMemo, {}, void 0), text, "..."] }, void 0) }, void 0)) }, void 0));
};

const SliderContainer = styled__default["default"].div `
  .e-control-wrapper {
    &.e-slider-container {
      .e-slider {
        //handle styling
        .e-handle {
          background-color: var(--cora-red);
          border: 1px solid var(--cora-red);
          width: 32px;
          height: 32px;
          border-radius: 50%;

          &.e-tab-handle {
            opacity: 0.8;
            box-shadow: 0 0 0 3px var(--cora-red-very-light);
          }
        }
        //bar styling
        .e-range {
          background-color: var(--cora-red-light);
        }
      }

      &.e-horizontal {
        //bar position
        .e-handle {
          margin-left: -16px;
          top: calc(50% - 16px);
        }
        //bar + coloured bar height
        .e-slider-track,
        .e-range {
          height: 8px;
        }
      }

      .e-scale {
        //tick font size
        .e-tick {
          .e-tick-value {
            font-size: 1rem;
          }
        }
        //position of the tick under the slider bar
        &.e-h-scale {
          .e-tick {
            .e-tick-value {
              &.e-tick-after {
                bottom: -25px;
              }
            }
          }
        }
      }
    }
  }
`;
const SliderHeaderContainer = styled__default["default"].div `
  display: flex;
  justify-content: space-between;
  align-items: center;
`;
const SliderInputContainer = styled__default["default"].div `
  width: 160px;
  display: flex;
  justify-content: end;
  input {
    width: 80px;
    margin-left: 5px;
  }
`;
const SliderHelpTextContainer = styled__default["default"].div `
  margin-top: 10px;
`;

const Slider = ({ label, value, name, type, minValue, maxValue, step, showTicks, helpText, onChange, }) => {
    const [leftPosition, setLeftPosition] = React__default["default"].useState(Array.isArray(value) ? value[0] : value);
    const [rightPosition, setRightPosition] = React__default["default"].useState(Array.isArray(value) ? value[1] : maxValue);
    const onSliderChange = (evt) => {
        if (Array.isArray(evt.value)) {
            setLeftPosition(evt.value[0]);
            setRightPosition(evt.value[1]);
            return;
        }
        setLeftPosition(evt.value);
    };
    const ticks = {
        placement: showTicks ? "After" : "None",
        largeStep: step < 1 ? 1 : step,
    };
    const position = [leftPosition, rightPosition];
    React__default["default"].useEffect(() => {
        switch (type) {
            case "Default":
            case "MinRange":
                onChange(leftPosition);
                break;
            case "Range":
                onChange([leftPosition, rightPosition]);
                break;
        }
    }, [leftPosition, rightPosition]);
    return (jsxRuntime.jsxs(SliderContainer, { children: [jsxRuntime.jsxs(SliderHeaderContainer, { children: [jsxRuntime.jsx(reactBootstrap.Form.Label, { children: label }, void 0), jsxRuntime.jsxs(SliderInputContainer, { children: [jsxRuntime.jsx(reactBootstrap.Form.Control, { type: "number", value: Number(leftPosition), onChange: (evt) => {
                                    setLeftPosition(Number(evt.target.value));
                                }, min: minValue, max: maxValue, step: step }, void 0), type === "Range" && (jsxRuntime.jsx(reactBootstrap.Form.Control, { type: "number", value: rightPosition, onChange: (evt) => {
                                    setRightPosition(Number(evt.target.value));
                                }, min: minValue, max: maxValue, step: step }, void 0))] }, void 0)] }, void 0), jsxRuntime.jsx(ej2ReactInputs.SliderComponent, { name: name, min: minValue, max: maxValue, step: step, value: position, type: type, ticks: ticks, change: (evt) => {
                    onSliderChange(evt);
                } }, void 0), helpText && (jsxRuntime.jsx(SliderHelpTextContainer, { children: jsxRuntime.jsx(reactBootstrap.Form.Text, Object.assign({ className: "text-muted" }, { children: helpText }), void 0) }, void 0))] }, void 0));
};

exports.Button = Button;
exports.ButtonIcon = ButtonIcon;
exports.ButtonLink = ButtonLink;
exports.ButtonMultiline = ButtonMultiline;
exports.Card = Card;
exports.CheckRadio = CheckRadio;
exports.CheckRadioGroup = CheckRadioGroup;
exports.Dropdown = Dropdown;
exports.Grid = Grid;
exports.Link = Link;
exports.Modal = Modal;
exports.NavBar = NavBar;
exports.Progress = Progress;
exports.ProgressGroup = ProgressGroup;
exports.ProgressGroupItem = ProgressGroupItem;
exports.ProgressSteps = ProgressSteps;
exports.Repeater = Repeater;
exports.Select = Select;
exports.Slider = Slider;
exports.Spinner = Spinner;
exports.Switch = Switch;
exports.TextInput = TextInput;
exports.Toast = Toast;
exports.ToastGroup = ToastGroup;
//# sourceMappingURL=index.js.map
