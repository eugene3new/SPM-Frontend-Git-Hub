import React from "react";
import { Form } from "react-bootstrap";
import {
  SliderContainer,
  SliderHeaderContainer,
  SliderInputContainer,
  SliderHelpTextContainer,
} from "./sliderStyles";
import {
  SliderChangeEventArgs,
  SliderComponent,
  TicksDataModel,
} from "@syncfusion/ej2-react-inputs";

export interface ISliderProps {
  label: string;
  value: number | number[];
  name: string;
  type: "Default" | "MinRange" | "Range";
  minValue: number;
  maxValue: number;
  step: number;
  showTicks: boolean;
  helpText?: string;
  onChange: (e: number | number[]) => void;
}

export const Slider: React.FC<ISliderProps> = ({
  label,
  value,
  name,
  type,
  minValue,
  maxValue,
  step,
  showTicks,
  helpText,
  onChange,
}) => {
  const [leftPosition, setLeftPosition] = React.useState(
    Array.isArray(value) ? value[0] : value
  );
  const [rightPosition, setRightPosition] = React.useState(
    Array.isArray(value) ? value[1] : maxValue
  );

  const onSliderChange = (evt: SliderChangeEventArgs) => {
    if (Array.isArray(evt.value)) {
      setLeftPosition(evt.value[0]);
      setRightPosition(evt.value[1]);
      return;
    }
    setLeftPosition(evt.value);
  };

  const ticks: TicksDataModel = {
    placement: showTicks ? "After" : "None",
    largeStep: step < 1 ? 1 : step,
  };

  const position: any = [leftPosition, rightPosition];

  React.useEffect(() => {
    switch (type) {
      case "Default":
      case "MinRange":
        onChange(leftPosition);
        break;
      case "Range":
        onChange([leftPosition, rightPosition]);
        break;
    }
  }, [leftPosition, rightPosition]);

  return (
    <SliderContainer>
      <SliderHeaderContainer>
        <Form.Label>{label}</Form.Label>
        <SliderInputContainer>
          <Form.Control
            type="number"
            value={Number(leftPosition)}
            onChange={(evt: any) => {
              setLeftPosition(Number(evt.target.value));
            }}
            min={minValue}
            max={maxValue}
            step={step}
          />
          {type === "Range" && (
            <Form.Control
              type="number"
              value={rightPosition}
              onChange={(evt: any) => {
                setRightPosition(Number(evt.target.value));
              }}
              min={minValue}
              max={maxValue}
              step={step}
            />
          )}
        </SliderInputContainer>
      </SliderHeaderContainer>
      <SliderComponent
        name={name}
        min={minValue}
        max={maxValue}
        step={step}
        value={position}
        type={type}
        ticks={ticks}
        change={(evt: any) => {
          onSliderChange(evt);
        }}
      />
      {helpText && (
        <SliderHelpTextContainer>
          <Form.Text className="text-muted">{helpText}</Form.Text>
        </SliderHelpTextContainer>
      )}
    </SliderContainer>
  );
};

export default Slider;
