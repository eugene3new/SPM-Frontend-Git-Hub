import React, { Component } from "react";
import { SortableElement, SortableHandle } from "react-sortable-hoc";
import {
  RepeaterRow,
  RepeaterTextCell,
  RepeaterNumericCell,
  RepeaterCheck,
  RepeaterGrabber,
  RepeaterCustomContainer,
  RepeaterCell,
  RepeaterPosition,
  RepeaterSelectCell,
} from "./repeaterStyles";
import { GrabberIcon } from "@primer/octicons-react";
import { FormCheck, FormControl } from "react-bootstrap";
import { Column, Row } from "./index";
import { SortableContainer } from "react-sortable-hoc";
import { v4 as createUniqueKey } from "uuid";
import Creatable from "react-select/creatable";
import { OnChangeValue } from "react-select";

export const RepeaterSortableList = SortableContainer(
  ({
    rows,
    columnTemplate,
    handleCheckChanged,
    handleInputChanged,
    handleSelectChanged,
    handleCreateOption,
    columnWidth,
    showCheckbox,
    showPosition,
    showReorder,
  }: {
    rows: Row[];
    columnTemplate: Column[];
    handleCheckChanged: (rowIndex: number) => void;
    handleInputChanged: (
      rowIndex: number,
      columnIndex: number,
      value: string
    ) => void;
    handleSelectChanged: any;
    handleCreateOption: any;
    columnWidth: number;
    showCheckbox: boolean;
    showPosition: boolean;
    showReorder: boolean;
  }) => {
    return (
      <ul>
        {rows.map((value, index) => (
          <SortableRow
            key={createUniqueKey()}
            index={index}
            value={value}
            columnTemplate={columnTemplate}
            handleCheckChanged={handleCheckChanged}
            handleInputChanged={handleInputChanged}
            handleSelectChanged={handleSelectChanged}
            handleCreateOption={handleCreateOption}
            rowIndex={index}
            columnWidth={columnWidth}
            showCheckbox={showCheckbox}
            showPosition={showPosition}
            showReorder={showReorder}
          />
        ))}
      </ul>
    );
  }
);

const DragHandle = SortableHandle(() => {
  return (
    <RepeaterGrabber>
      <GrabberIcon size={26} />
    </RepeaterGrabber>
  );
});

export const SortableRow = SortableElement(
  ({
    value,
    columnTemplate,
    handleCheckChanged,
    handleInputChanged,
    handleSelectChanged,
    handleCreateOption,
    rowIndex,
    columnWidth,
    showCheckbox,
    showPosition,
    showReorder,
  }: {
    value: Row;
    columnTemplate: Column[];
    handleCheckChanged: (rowIndex: number) => void;
    handleInputChanged: (
      rowIndex: number,
      columnIndex: number,
      value: string
    ) => void;
    handleSelectChanged: (
      selectedValue: any,
      columnIndex: number,
      rowIndex: number
    ) => void;
    handleCreateOption: (value: string, rowIndex: number) => void;
    rowIndex: number;
    columnWidth: number;
    showCheckbox: boolean;
    showPosition: boolean;
    showReorder: boolean;
  }) => {
    return (
      <RepeaterRow className={value.checked ? "checked" : ""}>
        {showCheckbox && (
          <RepeaterCheck>
            <FormCheck
              onChange={() => handleCheckChanged(rowIndex)}
              checked={value.checked}
            ></FormCheck>
          </RepeaterCheck>
        )}
        <RepeaterCustomContainer>
          {columnTemplate.map((column, columnIndex: number) => {
            switch (column.type) {
              case "Text":
                return (
                  <RepeaterTextCell width={columnWidth}>
                    {value.data[columnIndex]}
                  </RepeaterTextCell>
                );
              case "Numeric":
                return (
                  <RepeaterNumericCell width={columnWidth}>
                    {value.data[columnIndex]}
                  </RepeaterNumericCell>
                );
              case "List":
                return (
                  <RepeaterSelectCell width={columnWidth}>
                    <Creatable
                      onChange={(selectedValue) =>
                        handleSelectChanged(
                          selectedValue,
                          columnIndex,
                          rowIndex
                        )
                      }
                      onCreateOption={(e) => handleCreateOption(e, rowIndex)}
                      options={column.listItems}
                      isMulti={false}
                      value={column.listItems?.filter((selectedValue) =>
                        value.data[columnIndex]
                          .split(",")
                          .includes(selectedValue.value)
                      )}
                    />
                  </RepeaterSelectCell>
                );
              case "Input":
                return (
                  <RepeaterCell width={columnWidth}>
                    <FormControl
                      key={`input_${columnIndex}`}
                      onChange={(event) =>
                        handleInputChanged(
                          rowIndex,
                          columnIndex,
                          event.target.value
                        )
                      }
                      value={value.data[columnIndex]}
                    ></FormControl>
                  </RepeaterCell>
                );
            }
          })}
        </RepeaterCustomContainer>
        {showPosition && <RepeaterPosition>{rowIndex + 1}</RepeaterPosition>}
        {showReorder && <DragHandle />}
      </RepeaterRow>
    );
  }
);
