import React, { Component } from "react";
import { arrayMoveImmutable } from "../Common/Utilities/arrayMove";
import { RepeaterContainer, EmptyRepeater } from "./repeaterStyles";
import { RepeaterHeader } from "./repeaterHeader";
import { RepeaterSortableList } from "./repeaterRow";

export type Column = {
  title: string;
  type: "Text" | "Numeric" | "Input" | "List";
  listItems?: [{ value: string; text: string }];
};

export type Row = {
  checked: boolean;
  data: string[];
};

export interface IRepearProps {
  columnTemplate: Column[];
  rows: Row[];
  showCheckbox: boolean;
  showPosition: boolean;
  showReorder: boolean;
  showExpand: boolean;
  showAdd: boolean;
  expandOnClick: () => void;
  onCreateOption: (e: any, rowIndex: number) => void;
}

export const Repeater: React.FC<IRepearProps> = ({
  columnTemplate,
  rows,
  showCheckbox,
  showPosition,
  showReorder,
  showExpand,
  showAdd,
  expandOnClick,
  onCreateOption,
}: IRepearProps) => {
  const [stateRows, setStateRows] = React.useState<Row[]>(rows);

  const onSortEnd = ({
    oldIndex,
    newIndex,
  }: {
    oldIndex: number;
    newIndex: number;
  }) => {
    setStateRows((rows) => {
      return arrayMoveImmutable(rows, oldIndex, newIndex);
    });
  };

  type ValueChange = {
    rowIndex: number;
    columnIndex: number;
    valueFrom: string;
    valueTo: string;
  };

  const handleCheckChanged = (index: number) => {
    let rows = [...stateRows];
    rows[index].checked = !rows[index].checked;
    setStateRows(rows);
  };

  const handleCheckAll = (isChecked: boolean) => {
    let rows = [...stateRows];
    rows.forEach((row) => (row.checked = isChecked));
    setStateRows(rows);
  };

  const handleInputChanged = (
    rowIndex: number,
    columnIndex: number,
    value: string
  ) => {
    let rows = [...stateRows];
    rows[rowIndex].data[columnIndex] = value;
    setStateRows(rows);
  };

  const handleSelectChanged = (
    selectedValue: any,
    columnIndex: number,
    rowIndex: number
  ) => {
    let rows = [...stateRows];
    rows[rowIndex].data[columnIndex] = selectedValue.value;
    setStateRows(rows);
  };

  const handleAddRow = () => {
    let rows = [...stateRows];
    rows.splice(0, 0, { checked: false, data: [""] });
    setStateRows(rows);
  };

  const columnWidth = 100 / Object.keys(columnTemplate).length;

  return (
    <RepeaterContainer>
      <RepeaterHeader
        columnTemplate={columnTemplate}
        handleCheckAll={handleCheckAll}
        showCheckbox={showCheckbox}
        showPosition={showPosition}
        showExpand={showExpand}
        columnWidth={columnWidth}
        expandOnClick={expandOnClick}
        showAdd={showAdd}
        addRow={handleAddRow}
      />
      {stateRows.length > 0 && (
        <RepeaterSortableList
          rows={stateRows}
          columnTemplate={columnTemplate}
          handleCheckChanged={handleCheckChanged}
          handleInputChanged={handleInputChanged}
          handleSelectChanged={handleSelectChanged}
          handleCreateOption={(e: any, i: number) => {
            return onCreateOption(e, i);
          }}
          onSortEnd={onSortEnd}
          lockAxis="y"
          useDragHandle
          columnWidth={columnWidth}
          showCheckbox={showCheckbox}
          showPosition={showPosition}
          showReorder={showReorder}
        />
      )}
      {stateRows.length === 0 && (
        <EmptyRepeater>No Data to Display</EmptyRepeater>
      )}
    </RepeaterContainer>
  );
};

export default Repeater;
