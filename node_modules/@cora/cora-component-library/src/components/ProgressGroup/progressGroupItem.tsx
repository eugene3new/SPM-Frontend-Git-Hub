import React, { Component, FC } from "react";
import { Progress } from "../Progress";
import { PencilIcon, InfoIcon, XIcon } from "@primer/octicons-react";
import ButtonIcon from "../Buttons/ButtonIcon";
import ButtonLink from "../Buttons/ButtonLink";
import {
  ProgressButtons,
  ProgressGroupItemContanier,
  ProgressGroupLine,
  ProgressInfo,
  ProgressInfoBody,
  ProgressInfoFooter,
  ProgressInfoHeader,
  ProgressInfoX,
  ProgressItem,
  ProgressLabel,
} from "./progressGroupStyles";

export type ProgressGroupItemInfo = {
  title: string;
  description: string;
  actionText?: string;
  onAction?: () => void;
};

export interface ProgressGroupItemProps {
  percentage: number;
  label: string;
  isComplete?: boolean;
  isActive?: boolean;
  isFirst?: boolean;
  info: ProgressGroupItemInfo;
  onEdit: () => void;
}

export const ProgressGroupItem: FC<ProgressGroupItemProps> = ({
  percentage,
  label,
  isComplete = false,
  isActive = false,
  isFirst = false,
  info,
  onEdit,
}: ProgressGroupItemProps) => {
  const [infoIsVisible, setinfoIsVisible] = React.useState<boolean>(false);

  return (
    <ProgressGroupItemContanier isActive={isActive}>
      <ProgressItem>
        <Progress color="green" size={80} percentage={percentage} />
        {!isFirst && <ProgressGroupLine isComplete={isComplete} />}
      </ProgressItem>
      <ProgressButtons>
        <ButtonIcon onClick={onEdit}>
          <PencilIcon className={isActive ? "animate-pencil" : ""} size={28} />
        </ButtonIcon>
        <ButtonIcon
          onClick={() => {
            setinfoIsVisible(!infoIsVisible);
          }}
        >
          <InfoIcon size={28} />
        </ButtonIcon>
      </ProgressButtons>
      <ProgressLabel isActive={isActive}>{label.toUpperCase()}</ProgressLabel>
      {infoIsVisible && (
        <ProgressInfo>
          <ProgressInfoHeader>
            {info.title}
            <ProgressInfoX>
              <ButtonIcon
                onClick={() => {
                  setinfoIsVisible(false);
                }}
              >
                <XIcon size={28} />
              </ButtonIcon>
            </ProgressInfoX>
          </ProgressInfoHeader>
          <ProgressInfoBody>{info.description}</ProgressInfoBody>
          {info.actionText !== undefined && (
            <ProgressInfoFooter>
              <ButtonLink onClick={info.onAction}>{info.actionText}</ButtonLink>
            </ProgressInfoFooter>
          )}
        </ProgressInfo>
      )}
    </ProgressGroupItemContanier>
  );
};

export default ProgressGroupItem;
