import React from "react";
import styled, { keyframes } from "styled-components";

interface ProgressProps {
  label?: string;
  percentage: number;
  color: "green" | "red" | "blue" | "orange";
  size: number;
}

const animateProgress = (side: string) => {
  return keyframes`
    from {transform: rotate(0deg);}
    to {transform: rotate(${side + "Rotation"}deg);}
    `;
};

const ProgressLeft = styled.div<{
  color: string;
  leftRotation: number;
  animationSpeed: number;
  rightRotation: number;
}>`
  background: var(--cora-${({ color }) => color});
  transform: rotate(${({ leftRotation }) => leftRotation}deg);
  animation: ${animateProgress("left")}
    ${({ animationSpeed, leftRotation }) => animationSpeed * leftRotation}s
    linear;
  animation-delay: ${({ animationSpeed, rightRotation }) =>
    animationSpeed * rightRotation}s;
  animation-fill-mode: both;
`;

const ProgressRight = styled.div<{
  color: string;
  rightRotation: number;
  animationSpeed: number;
}>`
  background: var(--cora-${({ color }) => color});
  transform: rotate(${({ rightRotation }) => rightRotation}deg);
  animation: ${animateProgress("right")}
    ${({ animationSpeed, rightRotation }) => animationSpeed * rightRotation}s
    linear;
`;

const CoraProgress = styled.div<{ size: number }>`
  width: ${({ size }) => size}px;
  height: ${({ size }) => size}px;
  min-width: 75px;
  min-height: 75px;
  position: relative;

  .bar {
    position: absolute;
    height: 100%;
    width: 100%;
    background: transparent;
    clip-path: inset(0px 0px 0px 50%);
    z-index: 2;

    .progress {
      position: absolute;
      height: 100%;
      width: 100%;
      border-radius: 100%;
      -webkit-border-radius: 100%;
      clip-path: inset(0px 50% 0px 0px);
    }
  }

  .circle {
    .left {
      transform: rotate(180deg);
    }
  }
`;

const Inner = styled.div<{ color: string }>`
  background: var(--cora-${({ color }) => color}-very-light);
  position: absolute;
  z-index: 6;
  top: 50%;
  left: 50%;
  height: calc(100% - 9px);
  width: calc(100% - 9px);
  transform: translate(-50%, -50%);
  border-radius: 100%;
  display: flex;
`;

const Content = styled.div`
  position: absolute;
  top: 50%;
  left: 50%;
  transform: translate(-50%, -50%);
  z-index: 10;
  display: flex;
  flex-direction: column;
  text-align: center;
  font-weight: 500;
  color: #444444;
  line-height: 1;
`;

const Number = styled.div<{ size: number }>`
  font-size: ${({ size }) => size / 5}px;
`;

const Label = styled.div<{ size: number }>`
  font-size: ${({ size }) => size / 8}px;
`;

export const Progress: React.FC<ProgressProps> = ({
  label,
  percentage,
  color,
  size,
}: ProgressProps) => {
  const usablePercentage = percentage >= 100 ? 100 : percentage;
  const percentageInDegrees = (360 / 100) * usablePercentage;

  let leftRotation = 0;
  let rightRotation = 0;

  if (percentageInDegrees > 180) {
    rightRotation = 180;
    leftRotation = percentageInDegrees - rightRotation;
  } else {
    rightRotation = percentageInDegrees;
  }

  const animationSpeed = 1 / 360;

  return (
    <CoraProgress className="cora-progress" size={size}>
      <Inner color={color} />
      <Content>
        <Number size={size}>{usablePercentage}%</Number>
        <Label size={size}>{label}</Label>
      </Content>
      <div className="circle">
        <div className="bar left">
          <ProgressLeft
            className="progress"
            color={color}
            leftRotation={leftRotation}
            animationSpeed={animationSpeed}
            rightRotation={rightRotation}
          />
        </div>
        <div className="bar right">
          <ProgressRight
            className="progress"
            color={color}
            rightRotation={rightRotation}
            animationSpeed={animationSpeed}
          />
        </div>
      </div>
    </CoraProgress>
  );
};

export default Progress;
