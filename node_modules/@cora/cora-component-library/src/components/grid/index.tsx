import React from "react";
import {
  GridComponent,
  Inject,
  Page,
  Toolbar,
  Sort,
  Resize,
  Filter,
  PdfExport,
  ExcelExport,
  RowDD,
  ColumnsDirective,
  ColumnDirective,
  SelectionSettingsModel,
  EditSettingsModel,
  FilterSettingsModel,
  PageSettingsModel,
  Edit,
  CommandColumn,
  CommandModel,
} from "@syncfusion/ej2-react-grids";
import Styled from "styled-components";

export type ToolbarItems =
  | "Add"
  | "Search"
  | "Print"
  | "ExcelExport"
  | "PdfExport"
  | "Delete";

export type TableColumnDefinition = {
  name: string;
  header: string;
  type: string;
  format?: string | undefined;
  visible?: boolean;
  allowEditing?: boolean;
};

export interface GridProps {
  tableDefinition: TableColumnDefinition[];
  data: object[];
  primaryKey: string;
  allowPaging?: boolean;
  allowFilter?: boolean;
  allowSorting?: boolean;
  allowCheckboxColumn?: boolean;
  allowRowDragAndDrop?: boolean;
  toolbarItems?: ToolbarItems[];
  onRowChecked?: () => void;
}

const pageSettings: PageSettingsModel = {
  pageSize: 6,
  pageSizes: true,
};
const filterSettings: FilterSettingsModel = {
  type: "Menu",
};
const selectionSettings: SelectionSettingsModel = {
  checkboxOnly: true,
  persistSelection: true,
};
const editSettings: EditSettingsModel = {
  allowEditing: true,
  allowAdding: true,
  allowDeleting: true,
};
const commands: CommandModel[] = [
  {
    type: "Edit",
    buttonOption: { cssClass: "e-flat", iconCss: "e-edit e-icons" },
  },
  {
    type: "Delete",
    buttonOption: { cssClass: "e-flat", iconCss: "e-delete e-icons" },
  },
  {
    type: "Save",
    buttonOption: { cssClass: "e-flat", iconCss: "e-update e-icons" },
  },
  {
    type: "Cancel",
    buttonOption: { cssClass: "e-flat", iconCss: "e-cancel-icon e-icons" },
  },
];

const GridContainer = Styled.div`
  //Do some magic here later
  .e-grid{}
  .e-gridheader{}
  .e-gridpager{}
  .e-row{
    height: 50px;
  }
  .e-rowcell, .e-rowdragdrop, .e-rowdragdropcell{
    &.e-selectionbackground{
      background-color: var(--blue-very-light);
    }
  }
  .e-check{
    &:before{
      width: 50px;
      height: 50px;
    }}
`;

export const Grid: React.FC<GridProps> = ({
  tableDefinition,
  data,
  primaryKey,
  allowPaging,
  allowFilter,
  allowSorting,
  allowCheckboxColumn,
  allowRowDragAndDrop,
  toolbarItems,
  onRowChecked,
}: GridProps) => {
  return (
    <GridContainer>
      <GridComponent
        dataSource={data}
        pageSettings={pageSettings}
        filterSettings={filterSettings}
        selectionSettings={selectionSettings}
        editSettings={editSettings}
        toolbar={toolbarItems}
        allowSorting={allowSorting}
        allowPaging={allowPaging}
        allowFiltering={allowFilter}
        allowResizing={true}
        allowPdfExport={true}
        allowExcelExport={true}
        allowRowDragAndDrop={allowRowDragAndDrop}
        rowSelected={onRowChecked}
      >
        <ColumnsDirective>
          {allowCheckboxColumn && (
            <ColumnDirective
              type="checkbox"
              allowSorting={false}
              allowFiltering={false}
              width="60"
            ></ColumnDirective>
          )}
          {tableDefinition.map((column) => {
            return (
              <ColumnDirective
                key={column.name}
                isPrimaryKey={column.name === primaryKey}
                field={column.name}
                headerText={column.header}
                type={column.type}
                format={column.format}
                visible={column.visible}
                allowEditing={column.allowEditing}
              ></ColumnDirective>
            );
          })}
          <ColumnDirective
            headerText="Manage Records"
            width="160"
            commands={commands}
          ></ColumnDirective>
        </ColumnsDirective>
        <Inject
          services={[
            Page,
            Toolbar,
            Sort,
            Resize,
            Filter,
            PdfExport,
            ExcelExport,
            RowDD,
            Edit,
            CommandColumn,
          ]}
        />
      </GridComponent>
    </GridContainer>
  );
};

export default Grid;
