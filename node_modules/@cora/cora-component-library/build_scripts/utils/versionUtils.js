const chalk = require("chalk");
const { execSync } = require("child_process");

exports.buildVersionObject = function (version) {
  const major = Number(version.split(".")[0]);
  const minor = Number(version.split(".")[1]);
  const patch = Number(version.split(".")[2]);

  const majorString = chalk.red(`${`${major}`}.${minor}.${patch}`);
  const minorString = `${major}.${chalk.red(`${minor}.${patch}`)}`;
  const patchString = `${major}.${minor}.${chalk.red(`${patch}`)}`;

  const newMajorString = `${chalk.blue(`${major + 1}`)}.0.0`;
  const newMinorString = `${major}.${chalk.blue(`${minor + 1}`)}.0`;
  const newPatchString = `${major}.${minor}.${chalk.blue(`${patch + 1}`)}`;

  return {
    patch: {
      id: 0,
      number: patch,
      newNumber: patch + 1,
      string: patchString,
      newString: newPatchString,
    },
    minor: {
      id: 1,
      number: minor,
      newNumber: minor + 1,
      string: minorString,
      newString: newMinorString,
    },
    major: {
      id: 2,
      number: major,
      newNumber: major + 1,
      string: majorString,
      newString: newMajorString,
    },
  };
};

exports.updateVersionNumber = function (versionType, verOBJ) {
  const npmCommand = "npm version";

  switch (versionType.id) {
    case 0:
      console.log(
        chalk.white(
          `Updating Version: ${verOBJ.patch.string} => ${verOBJ.patch.newString}`
        )
      );
      //execSync(`${npmCommand} patch`);
      break;
    case 1:
      console.log(
        chalk.white(
          `Updating Version: ${verOBJ.minor.string} => ${verOBJ.minor.newString}`
        )
      );
      //execSync(`${npmCommand} minor`);
      break;
    case 2:
      console.log(
        chalk.white(
          `Updating Version: ${verOBJ.major.string} => ${verOBJ.major.newString}`
        )
      );
      //execSync(`${npmCommand} major`);
      break;
  }
  console.log(chalk.green("[SUCCESS]"));
};
